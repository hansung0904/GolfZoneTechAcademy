Chapter 14 2.1 스트림(Stream)이란?

- 다양한 데이터 소스를 표준화된 방법으로 다루기 위한 것
List<Integer> list = Arrays.asList(1,2,3,4,5);
Stream<Integer> intStream = list.stream(); // Collection
Stream<String> strStream = Stream.of(new String[]("a","b","c") // Array
Stream<Integer> evenStream = Stream.iterate(0, n->n+2); // 0,2,4,6, ...
Stream<Double> randomStream = Stream.generate(Math::random); // lambda
IntStream intStream = new Random().ints(5); // 난수 스트림(크기가 5)

- 스트림이 제공하는 기능 - 중간 연산과 최종 연산
    - 중간 연산 - 연산결과가 스트림인 연산. 반복적으로 사용이가능하다.
    - 최종 연산 - 연산결과가 스트림이 아닌 연산. 스트림의 요소를 소모하므로 한번만 적용이 가능하다.

String[] strArr = {"dd","aaa","CC","cc","b"};
Stream<String> stream = Stream.of(strArr); // 문자열 배열이 소스인 스트림
Stream<String> filteredStream = stream.filter(); // 걸러내기(중간 연산)
Stream<String> distinctedStream = stream.distinct(); // 중복제거 (중간 연산)
Stream<String> limitedStream = stream.limit(5); // 스트림 자르기 (중간 연산)
int total = stream.count(); // Element count (최종 연산)

2.2 스트림(Stream)의 특징(1/2)
- 스트림은 데이터 소스로부터 데이터를 읽기만 할 뿐 변경하지 않는다.
List<Integer> list = Arrays.asList(3,1,5,4,2);
List<Integer> sortedList = list.stream().sorted() // list를 정렬
                            .collect(Collectors.toList()); // 새로운 List에 저장
System.out.println(list); // [3,1,5,4,2]
System.out.println(sortedList); // [1,2,3,4,5]

- 스트림은 Iterator처럼 일회용이다.(필요하면 다시 스트림을 재생성해주어야 한다.)
strStream.forEach(System.out::println); // 모든 Element를 화면에 출력해라 (최종연산)
int numOfStr = strStream.count(); // Error 스트림이 이미 닫힘.

- 최종 연산 전까지 중간연산이 수행되지 않는다 - 지연된 연산
IntStream intStream = new Random().ints(1,46) // 1~45범위 무한 스트림
intStream.distinct().limit(6).sorted() // 중간연산
                    .forEach(i->System.out.print(i+"")); // 최종연산

스트림(Stream)의 특징 (2/2)
- 스트림은 작업을 내부 반복으로 처리
for(String str : strList)
    System.out.println(str); --> stream.forEach(System.out::println);

void forEach(Consumer<? super T> action) {
    Objects.requireNonNull(action); // Parameter Null check

    for(T t : src) // 내부 반복(for문을 method안으로 넣음)
        action.accept(T);
}

- 스트림의 작업을 병렬로 처리 - 병렬스트림
Stream<String> strStream = Stream.of("dd","aaa","CC","cc","b");
int sum = strStream.parallelStream() // 병렬 스트림으로 전환(속성만 변경되었음)
            .mapToInt(s -> s.length()).sum(); // 모든 문자열의 길이의 합

- 기본형 스트림 -IntStream, LongStream, DoubleStream
    - 오토박싱&언박싱의 비효율이 제거됨(Stream<Integer>대신 IntStream사용)
    - 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공

